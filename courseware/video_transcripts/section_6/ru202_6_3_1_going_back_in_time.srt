0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:02,009
XRANGE provides us with the means

2
00:00:02,009 --> 00:00:05,640
to travel downstream, advancing from an arbitrary position

3
00:00:05,640 --> 00:00:08,460
in it, towards the streams end.

4
00:00:08,460 --> 00:00:11,430
There are cases, however, where the opposite direction

5
00:00:11,430 --> 00:00:12,300
is called for.

6
00:00:12,300 --> 00:00:14,940
For example, with a stream that keeps growing,

7
00:00:14,940 --> 00:00:19,140
we may want to process just the last n messages.

8
00:00:19,140 --> 00:00:21,720
Obviously, we'll need a way to "salmon" it

9
00:00:21,720 --> 00:00:22,920
up and go upstream.

10
00:00:22,920 --> 00:00:25,440


11
00:00:25,440 --> 00:00:28,110
That's what XREVERANGE is for.

12
00:00:28,110 --> 00:00:32,340
It behaves exactly like XRANGE, but accesses the stream in reverse

13
00:00:32,340 --> 00:00:33,180
order.

14
00:00:33,180 --> 00:00:37,470
That means that the ranges it expects are in reverse,

15
00:00:37,470 --> 00:00:39,870
and in order to get the entire stream of it,

16
00:00:39,870 --> 00:00:43,440
you'll need to specify the "+" and "-" special characters

17
00:00:43,440 --> 00:00:46,360
in that order.

18
00:00:46,360 --> 00:00:49,580
We can also easily modify our previous example

19
00:00:49,580 --> 00:00:52,630
that sums the natural numbers stream to use

20
00:00:52,630 --> 00:00:55,000
XREVERANGE instead of XRANGE.

21
00:00:55,000 --> 00:00:57,910
Thanks to the commutative and associative laws,

22
00:00:57,910 --> 00:01:00,550
and although we are summing all natural numbers

23
00:01:00,550 --> 00:01:06,760
in reverse order, we still get the same result, naturally.

24
00:01:06,760 --> 00:01:10,660
The last modification would be to have the summing process

25
00:01:10,660 --> 00:01:13,750
stop after it completed enough iterations.

26
00:01:13,750 --> 00:01:16,270
With enough being a matter of taste and choice,

27
00:01:16,270 --> 00:01:19,390
the script will accept that as input.

28
00:01:19,390 --> 00:01:22,090
We can sum any number of integers

29
00:01:22,090 --> 00:01:25,570
as long as there are enough messages in the stream.

30
00:01:25,570 --> 00:01:28,480
As shown in the example, exceeding the streams length

31
00:01:28,480 --> 00:01:32,610
is perfectly harmless when handled correctly.

32
00:01:32,610 --> 00:01:34,320
This manner of "wading" upstream

33
00:01:34,320 --> 00:01:37,560
is suitable for producing near-real-time aggregates culled

34
00:01:37,560 --> 00:01:39,420
from the end of the stream.

35
00:01:39,420 --> 00:01:43,000
By sampling the latest messages, we can, for example,

36
00:01:43,000 --> 00:01:47,300
calculate the average of the last n natural numbers.

37
00:01:47,300 --> 00:01:47,800


