0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:03,240
A distributed system relies on messaging to drive

2
00:00:03,240 --> 00:00:05,100
and co-ordinate its components.

3
00:00:05,100 --> 00:00:07,680
A distributed messaging system can power that

4
00:00:07,680 --> 00:00:09,660
communication and often does.

5
00:00:09,660 --> 00:00:13,530
Some systems are built to handle data that arrives continuously

6
00:00:13,530 --> 00:00:15,870
and act quickly on changes in it.

7
00:00:15,870 --> 00:00:18,780
In the era of big data, this mode of operation

8
00:00:18,780 --> 00:00:22,020
is called stream processing after being popularized

9
00:00:22,020 --> 00:00:25,440
by Apache Storm and merges similar concepts that

10
00:00:25,440 --> 00:00:27,520
have been around before.

11
00:00:27,520 --> 00:00:29,230
We turn to stream processing when

12
00:00:29,230 --> 00:00:32,290
we need to act on data quickly within milliseconds

13
00:00:32,290 --> 00:00:34,120
to seconds of its arrival.

14
00:00:34,120 --> 00:00:36,910
Stream processing can be intuitively defined

15
00:00:36,910 --> 00:00:39,610
as the opposite of batch processing.

16
00:00:39,610 --> 00:00:41,650
The continuous flow of data into the system

17
00:00:41,650 --> 00:00:44,290
is called the data stream -- or stream for short.

18
00:00:44,290 --> 00:00:48,010
As it flows into and through a stream processing system

19
00:00:48,010 --> 00:00:50,320
the system is able to pick up and act

20
00:00:50,320 --> 00:00:52,120
upon the data in real time.

21
00:00:52,120 --> 00:00:54,070
Temperature monitoring is perhaps

22
00:00:54,070 --> 00:00:56,860
the most popular example of stream processing.

23
00:00:56,860 --> 00:00:59,410
So let's use that as our starting point.

24
00:00:59,410 --> 00:01:02,200
Imagine a system that alerts users whenever

25
00:01:02,200 --> 00:01:06,700
the temperature outside falls within some preset range. Such

26
00:01:06,700 --> 00:01:09,520
a system would consist of sensors that are deployed

27
00:01:09,520 --> 00:01:12,400
at physical locations and report their readings back

28
00:01:12,400 --> 00:01:14,220
to the mothership.

29
00:01:14,220 --> 00:01:16,920
As the data is generated by the sensors

30
00:01:16,920 --> 00:01:19,230
and streamed into the system, the system

31
00:01:19,230 --> 00:01:22,140
should be able to act as fast as possible

32
00:01:22,140 --> 00:01:24,720
to notify its users when needed.

33
00:01:24,720 --> 00:01:27,420
Optimally, it should be able to react immediately

34
00:01:27,420 --> 00:01:29,160
upon the event of getting new data.

35
00:01:29,160 --> 00:01:33,030
And obviously, batch processing is not suitable for this.

36
00:01:33,030 --> 00:01:35,580
The stream processing system, therefore, does not

37
00:01:35,580 --> 00:01:37,200
wait for data to be batched.

38
00:01:37,200 --> 00:01:39,600
Instead, it attempts to process each item

39
00:01:39,600 --> 00:01:41,710
as it arrives in real time.

40
00:01:41,710 --> 00:01:44,760
Furthermore, because the system is setup only once,

41
00:01:44,760 --> 00:01:47,250
as opposed to a batch process that needs

42
00:01:47,250 --> 00:01:49,980
to be run over and over again, it effectively

43
00:01:49,980 --> 00:01:53,320
has no set up costs per process event.

44
00:01:53,320 --> 00:01:56,310
This allows the system to react faster to changes.

45
00:01:56,310 --> 00:01:59,850
While reaction time is the main use case for stream processing,

46
00:01:59,850 --> 00:02:02,760
it does have some other useful aspects.

47
00:02:02,760 --> 00:02:06,000
Stream processing is mostly concerned with recent data,

48
00:02:06,000 --> 00:02:08,009
so it is typically simpler to implement,

49
00:02:08,009 --> 00:02:11,880
requires fewer resources, and provides faster responses

50
00:02:11,880 --> 00:02:15,720
when compared to big data warehouses and ad hoc batch

51
00:02:15,720 --> 00:02:16,950
processing.

52
00:02:16,950 --> 00:02:19,140
Their comparative simplicity also

53
00:02:19,140 --> 00:02:21,990
makes streams easier to scale, so they

54
00:02:21,990 --> 00:02:26,190
can absorb data coming in at high volumes and velocities.

55
00:02:26,190 --> 00:02:29,280
Streams act in such cases as buffers in front

56
00:02:29,280 --> 00:02:31,200
of other system components.

57
00:02:31,200 --> 00:02:34,860
They smooth the irregularities in the influx of data,

58
00:02:34,860 --> 00:02:38,670
stabilizing and protecting the system from surges.

59
00:02:38,670 --> 00:02:40,890
Stream processing is a natural choice

60
00:02:40,890 --> 00:02:45,090
for time series like data that comes in a never ending flow.

61
00:02:45,090 --> 00:02:48,330
It is also especially useful -- and perhaps the only viable

62
00:02:48,330 --> 00:02:49,140
option --

63
00:02:49,140 --> 00:02:52,260
when the data set is simply too big to be stored.

64
00:02:52,260 --> 00:02:54,750
Instead of attempting to store the entire data set

65
00:02:54,750 --> 00:02:57,480
for processing, the firehose of raw data

66
00:02:57,480 --> 00:02:59,190
can be streamed through a system that

67
00:02:59,190 --> 00:03:03,090
only captures and processes the relevant bits of it.

68
00:03:03,090 --> 00:03:05,610
Although the entire firehose cannot be stored,

69
00:03:05,610 --> 00:03:09,900
it is possible to store and use its filtered aggregations.

70
00:03:09,900 --> 00:03:13,950
On the spectrum of trade-offs, where on one end is batch

71
00:03:13,950 --> 00:03:18,090
processing, on the other end lies stream processing --

72
00:03:18,090 --> 00:03:21,540
a stream of changes to the data is faster and cheaper

73
00:03:21,540 --> 00:03:25,610
to process than waiting for all the data to arrive.

