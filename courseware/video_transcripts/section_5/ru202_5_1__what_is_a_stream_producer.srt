0
00:00:00,000 --> 00:00:00,500


1
00:00:00,500 --> 00:00:03,840
In this chapter, we'll discuss the stream producer interface

2
00:00:03,840 --> 00:00:06,690
and the way in which messages are structured.

3
00:00:06,690 --> 00:00:09,240
This stream is a data structure, and the data

4
00:00:09,240 --> 00:00:11,520
stored in it are messages.

5
00:00:11,520 --> 00:00:15,000
The messages are written to the stream by software components.

6
00:00:15,000 --> 00:00:17,880
Such components are called stream producers,

7
00:00:17,880 --> 00:00:20,430
as they produce new messages, and therefore

8
00:00:20,430 --> 00:00:22,320
the stream itself.

9
00:00:22,320 --> 00:00:24,840
From a high-level perspective, the stream producer

10
00:00:24,840 --> 00:00:26,640
integrates use-case-specific logic

11
00:00:26,640 --> 00:00:29,130
with the Redis stream producer API.

12
00:00:29,130 --> 00:00:32,880
Generally, a producer reads data from one or more sources

13
00:00:32,880 --> 00:00:35,160
and then writes it to the stream, possibly

14
00:00:35,160 --> 00:00:37,950
after transforming it in the process.

15
00:00:37,950 --> 00:00:40,860
So a producer can be very simple, very complex,

16
00:00:40,860 --> 00:00:42,270
or anywhere in between.

17
00:00:42,270 --> 00:00:45,840
It all depends on the system that it operates in.

18
00:00:45,840 --> 00:00:48,300
For example, a simple producer may

19
00:00:48,300 --> 00:00:52,380
be embedded inside an IoT temperature sensor.

20
00:00:52,380 --> 00:00:55,380
The sensor periodically samples the current temperature

21
00:00:55,380 --> 00:00:58,590
readings and then appends the raw values

22
00:00:58,590 --> 00:01:01,200
to the "temperatures" Redis stream.

23
00:01:01,200 --> 00:01:03,450
In such a setup, it is conceivable

24
00:01:03,450 --> 00:01:05,430
that there are many, perhaps hundreds

25
00:01:05,430 --> 00:01:08,740
or thousands of such producers.

26
00:01:08,740 --> 00:01:12,070
In another context, such as that of a shopping site implemented

27
00:01:12,070 --> 00:01:15,640
with micro-services, producers may be any of the services

28
00:01:15,640 --> 00:01:17,230
that power the site.

29
00:01:17,230 --> 00:01:19,840
For example, the order confirmation

30
00:01:19,840 --> 00:01:23,680
micro-service can store each confirmed order Redis stream

31
00:01:23,680 --> 00:01:25,780
to facilitate further processing,

32
00:01:25,780 --> 00:01:27,430
such as sending an email.

33
00:01:27,430 --> 00:01:30,960


34
00:01:30,960 --> 00:01:33,000
While a part of the producer component that

35
00:01:33,000 --> 00:01:35,460
generates the data is quite open-ended,

36
00:01:35,460 --> 00:01:37,620
the part that writes it to a Redis stream

37
00:01:37,620 --> 00:01:39,210
is always the same.

38
00:01:39,210 --> 00:01:42,720
All Redis stream producers use the Redis Stream Producer

39
00:01:42,720 --> 00:01:47,570
API, which consists of a single all-purpose command.

40
00:01:47,570 --> 00:01:49,310
In the following units, we'll learn

41
00:01:49,310 --> 00:01:53,060
about adding messages, identifying messages,

42
00:01:53,060 --> 00:01:55,730
the data in messages and managing

43
00:01:55,730 --> 00:01:58,590
the stream's length.

